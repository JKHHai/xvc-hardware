// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "test_hls_server.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic test_hls_server::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<577> test_hls_server::ap_const_lv577_lc
const sc_logic test_hls_server::ap_const_logic_1 = sc_dt::Log_1;

test_hls_server::test_hls_server(sc_module_name name) : sc_module(name), mVcdFile(0) {
    Block_proc24_U0 = new Block_proc24("Block_proc24_U0");
    Block_proc24_U0->ap_clk(ap_clk);
    Block_proc24_U0->ap_rst(ap_rst);
    Block_proc24_U0->ap_start(Block_proc24_U0_ap_start);
    Block_proc24_U0->ap_done(Block_proc24_U0_ap_done);
    Block_proc24_U0->ap_continue(Block_proc24_U0_ap_continue);
    Block_proc24_U0->ap_idle(Block_proc24_U0_ap_idle);
    Block_proc24_U0->ap_ready(Block_proc24_U0_ap_ready);
    Block_proc24_U0->input_V_dout(input_V_dout);
    Block_proc24_U0->input_V_empty_n(input_V_empty_n);
    Block_proc24_U0->input_V_read(Block_proc24_U0_input_V_read);
    Block_proc24_U0->output_V_din(Block_proc24_U0_output_V_din);
    Block_proc24_U0->output_V_full_n(output_V_full_n);
    Block_proc24_U0->output_V_write(Block_proc24_U0_output_V_write);

    SC_METHOD(thread_Block_proc24_U0_ap_continue);

    SC_METHOD(thread_Block_proc24_U0_ap_start);

    SC_METHOD(thread_Block_proc24_U0_start_full_n);

    SC_METHOD(thread_Block_proc24_U0_start_write);

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_input_V_read);
    sensitive << ( Block_proc24_U0_input_V_read );

    SC_METHOD(thread_output_V_din);
    sensitive << ( Block_proc24_U0_output_V_din );

    SC_METHOD(thread_output_V_write);
    sensitive << ( Block_proc24_U0_output_V_write );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "test_hls_server_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, input_V_dout, "(port)input_V_dout");
    sc_trace(mVcdFile, input_V_empty_n, "(port)input_V_empty_n");
    sc_trace(mVcdFile, input_V_read, "(port)input_V_read");
    sc_trace(mVcdFile, output_V_din, "(port)output_V_din");
    sc_trace(mVcdFile, output_V_full_n, "(port)output_V_full_n");
    sc_trace(mVcdFile, output_V_write, "(port)output_V_write");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, Block_proc24_U0_ap_start, "Block_proc24_U0_ap_start");
    sc_trace(mVcdFile, Block_proc24_U0_ap_done, "Block_proc24_U0_ap_done");
    sc_trace(mVcdFile, Block_proc24_U0_ap_continue, "Block_proc24_U0_ap_continue");
    sc_trace(mVcdFile, Block_proc24_U0_ap_idle, "Block_proc24_U0_ap_idle");
    sc_trace(mVcdFile, Block_proc24_U0_ap_ready, "Block_proc24_U0_ap_ready");
    sc_trace(mVcdFile, Block_proc24_U0_input_V_read, "Block_proc24_U0_input_V_read");
    sc_trace(mVcdFile, Block_proc24_U0_output_V_din, "Block_proc24_U0_output_V_din");
    sc_trace(mVcdFile, Block_proc24_U0_output_V_write, "Block_proc24_U0_output_V_write");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, Block_proc24_U0_start_full_n, "Block_proc24_U0_start_full_n");
    sc_trace(mVcdFile, Block_proc24_U0_start_write, "Block_proc24_U0_start_write");
#endif

    }
    mHdltvinHandle.open("test_hls_server.hdltvin.dat");
    mHdltvoutHandle.open("test_hls_server.hdltvout.dat");
}

test_hls_server::~test_hls_server() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete Block_proc24_U0;
}

void test_hls_server::thread_Block_proc24_U0_ap_continue() {
    Block_proc24_U0_ap_continue = ap_const_logic_1;
}

void test_hls_server::thread_Block_proc24_U0_ap_start() {
    Block_proc24_U0_ap_start = ap_const_logic_1;
}

void test_hls_server::thread_Block_proc24_U0_start_full_n() {
    Block_proc24_U0_start_full_n = ap_const_logic_1;
}

void test_hls_server::thread_Block_proc24_U0_start_write() {
    Block_proc24_U0_start_write = ap_const_logic_0;
}

void test_hls_server::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_0;
}

void test_hls_server::thread_input_V_read() {
    input_V_read = Block_proc24_U0_input_V_read.read();
}

void test_hls_server::thread_output_V_din() {
    output_V_din = Block_proc24_U0_output_V_din.read();
}

void test_hls_server::thread_output_V_write() {
    output_V_write = Block_proc24_U0_output_V_write.read();
}

void test_hls_server::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"input_V_dout\" :  \"" << input_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_V_empty_n\" :  \"" << input_V_empty_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"input_V_read\" :  \"" << input_V_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_V_din\" :  \"" << output_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"output_V_full_n\" :  \"" << output_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_V_write\" :  \"" << output_V_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

