// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Block_proc24_HH_
#define _Block_proc24_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Block_proc24 : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<577> > input_V_dout;
    sc_in< sc_logic > input_V_empty_n;
    sc_out< sc_logic > input_V_read;
    sc_out< sc_lv<577> > output_V_din;
    sc_in< sc_logic > output_V_full_n;
    sc_out< sc_logic > output_V_write;


    // Module declarations
    Block_proc24(sc_module_name name);
    SC_HAS_PROCESS(Block_proc24);

    ~Block_proc24();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > input_V_blk_n;
    sc_signal< sc_lv<1> > tmp_nbreadreq_fu_50_p3;
    sc_signal< sc_lv<1> > tmp_1_nbwritereq_fu_58_p3;
    sc_signal< sc_logic > output_V_blk_n;
    sc_signal< bool > ap_predicate_op10_read_state1;
    sc_signal< bool > ap_predicate_op17_write_state1;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<63> > tmp_4_fu_91_p4;
    sc_signal< sc_lv<64> > tmp_3_fu_101_p3;
    sc_signal< sc_lv<1> > temp_data_out_tlast_s_fu_79_p3;
    sc_signal< sc_lv<64> > temp_data_out_tkeep_s_fu_109_p2;
    sc_signal< sc_lv<511> > tmp_5_fu_87_p1;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_state1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_240;
    static const sc_lv<32> ap_const_lv32_200;
    static const sc_lv<32> ap_const_lv32_23E;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<64> ap_const_lv64_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_predicate_op10_read_state1();
    void thread_ap_predicate_op17_write_state1();
    void thread_ap_ready();
    void thread_input_V_blk_n();
    void thread_input_V_read();
    void thread_output_V_blk_n();
    void thread_output_V_din();
    void thread_output_V_write();
    void thread_temp_data_out_tkeep_s_fu_109_p2();
    void thread_temp_data_out_tlast_s_fu_79_p3();
    void thread_tmp_1_nbwritereq_fu_58_p3();
    void thread_tmp_3_fu_101_p3();
    void thread_tmp_4_fu_91_p4();
    void thread_tmp_5_fu_87_p1();
    void thread_tmp_nbreadreq_fu_50_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
