// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Block_proc24.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Block_proc24::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Block_proc24::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> Block_proc24::ap_ST_fsm_state1 = "1";
const sc_lv<32> Block_proc24::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool Block_proc24::ap_const_boolean_1 = true;
const sc_lv<1> Block_proc24::ap_const_lv1_1 = "1";
const sc_lv<32> Block_proc24::ap_const_lv32_240 = "1001000000";
const sc_lv<32> Block_proc24::ap_const_lv32_200 = "1000000000";
const sc_lv<32> Block_proc24::ap_const_lv32_23E = "1000111110";
const sc_lv<1> Block_proc24::ap_const_lv1_0 = "0";
const sc_lv<64> Block_proc24::ap_const_lv64_1 = "1";

Block_proc24::Block_proc24(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( input_V_empty_n );
    sensitive << ( output_V_full_n );
    sensitive << ( ap_predicate_op10_read_state1 );
    sensitive << ( ap_predicate_op17_write_state1 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( input_V_empty_n );
    sensitive << ( output_V_full_n );
    sensitive << ( ap_predicate_op10_read_state1 );
    sensitive << ( ap_predicate_op17_write_state1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_predicate_op10_read_state1);
    sensitive << ( tmp_nbreadreq_fu_50_p3 );
    sensitive << ( tmp_1_nbwritereq_fu_58_p3 );

    SC_METHOD(thread_ap_predicate_op17_write_state1);
    sensitive << ( tmp_nbreadreq_fu_50_p3 );
    sensitive << ( tmp_1_nbwritereq_fu_58_p3 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( input_V_empty_n );
    sensitive << ( output_V_full_n );
    sensitive << ( ap_predicate_op10_read_state1 );
    sensitive << ( ap_predicate_op17_write_state1 );

    SC_METHOD(thread_input_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( input_V_empty_n );
    sensitive << ( tmp_nbreadreq_fu_50_p3 );
    sensitive << ( tmp_1_nbwritereq_fu_58_p3 );

    SC_METHOD(thread_input_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( input_V_empty_n );
    sensitive << ( output_V_full_n );
    sensitive << ( ap_predicate_op10_read_state1 );
    sensitive << ( ap_predicate_op17_write_state1 );

    SC_METHOD(thread_output_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( output_V_full_n );
    sensitive << ( tmp_nbreadreq_fu_50_p3 );
    sensitive << ( tmp_1_nbwritereq_fu_58_p3 );

    SC_METHOD(thread_output_V_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( input_V_empty_n );
    sensitive << ( output_V_full_n );
    sensitive << ( ap_predicate_op10_read_state1 );
    sensitive << ( ap_predicate_op17_write_state1 );
    sensitive << ( temp_data_out_tlast_s_fu_79_p3 );
    sensitive << ( temp_data_out_tkeep_s_fu_109_p2 );
    sensitive << ( tmp_5_fu_87_p1 );

    SC_METHOD(thread_output_V_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( input_V_empty_n );
    sensitive << ( output_V_full_n );
    sensitive << ( ap_predicate_op10_read_state1 );
    sensitive << ( ap_predicate_op17_write_state1 );

    SC_METHOD(thread_temp_data_out_tkeep_s_fu_109_p2);
    sensitive << ( tmp_3_fu_101_p3 );

    SC_METHOD(thread_temp_data_out_tlast_s_fu_79_p3);
    sensitive << ( input_V_dout );

    SC_METHOD(thread_tmp_1_nbwritereq_fu_58_p3);
    sensitive << ( output_V_full_n );

    SC_METHOD(thread_tmp_3_fu_101_p3);
    sensitive << ( tmp_4_fu_91_p4 );

    SC_METHOD(thread_tmp_4_fu_91_p4);
    sensitive << ( input_V_dout );

    SC_METHOD(thread_tmp_5_fu_87_p1);
    sensitive << ( input_V_dout );

    SC_METHOD(thread_tmp_nbreadreq_fu_50_p3);
    sensitive << ( input_V_empty_n );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( input_V_empty_n );
    sensitive << ( output_V_full_n );
    sensitive << ( ap_predicate_op10_read_state1 );
    sensitive << ( ap_predicate_op17_write_state1 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "1";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Block_proc24_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_V_dout, "(port)input_V_dout");
    sc_trace(mVcdFile, input_V_empty_n, "(port)input_V_empty_n");
    sc_trace(mVcdFile, input_V_read, "(port)input_V_read");
    sc_trace(mVcdFile, output_V_din, "(port)output_V_din");
    sc_trace(mVcdFile, output_V_full_n, "(port)output_V_full_n");
    sc_trace(mVcdFile, output_V_write, "(port)output_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, input_V_blk_n, "input_V_blk_n");
    sc_trace(mVcdFile, tmp_nbreadreq_fu_50_p3, "tmp_nbreadreq_fu_50_p3");
    sc_trace(mVcdFile, tmp_1_nbwritereq_fu_58_p3, "tmp_1_nbwritereq_fu_58_p3");
    sc_trace(mVcdFile, output_V_blk_n, "output_V_blk_n");
    sc_trace(mVcdFile, ap_predicate_op10_read_state1, "ap_predicate_op10_read_state1");
    sc_trace(mVcdFile, ap_predicate_op17_write_state1, "ap_predicate_op17_write_state1");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, tmp_4_fu_91_p4, "tmp_4_fu_91_p4");
    sc_trace(mVcdFile, tmp_3_fu_101_p3, "tmp_3_fu_101_p3");
    sc_trace(mVcdFile, temp_data_out_tlast_s_fu_79_p3, "temp_data_out_tlast_s_fu_79_p3");
    sc_trace(mVcdFile, temp_data_out_tkeep_s_fu_109_p2, "temp_data_out_tkeep_s_fu_109_p2");
    sc_trace(mVcdFile, tmp_5_fu_87_p1, "tmp_5_fu_87_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Block_proc24::~Block_proc24() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Block_proc24::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, input_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op10_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, output_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op17_write_state1.read()))))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
}

void Block_proc24::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Block_proc24::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, input_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op10_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, output_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op17_write_state1.read())));
}

void Block_proc24::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, input_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op10_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, output_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op17_write_state1.read()))))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Block_proc24::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Block_proc24::thread_ap_predicate_op10_read_state1() {
    ap_predicate_op10_read_state1 = (esl_seteq<1,1,1>(tmp_nbreadreq_fu_50_p3.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_nbwritereq_fu_58_p3.read()));
}

void Block_proc24::thread_ap_predicate_op17_write_state1() {
    ap_predicate_op17_write_state1 = (esl_seteq<1,1,1>(tmp_nbreadreq_fu_50_p3.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_nbwritereq_fu_58_p3.read()));
}

void Block_proc24::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, input_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op10_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, output_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op17_write_state1.read()))))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Block_proc24::thread_input_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_50_p3.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_nbwritereq_fu_58_p3.read()))) {
        input_V_blk_n = input_V_empty_n.read();
    } else {
        input_V_blk_n = ap_const_logic_1;
    }
}

void Block_proc24::thread_input_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op10_read_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, input_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op10_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, output_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op17_write_state1.read()))))) {
        input_V_read = ap_const_logic_1;
    } else {
        input_V_read = ap_const_logic_0;
    }
}

void Block_proc24::thread_output_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_50_p3.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_nbwritereq_fu_58_p3.read()))) {
        output_V_blk_n = output_V_full_n.read();
    } else {
        output_V_blk_n = ap_const_logic_1;
    }
}

void Block_proc24::thread_output_V_din() {
    output_V_din = esl_concat<576,1>(esl_concat<65,511>(esl_concat<1,64>(temp_data_out_tlast_s_fu_79_p3.read(), temp_data_out_tkeep_s_fu_109_p2.read()), tmp_5_fu_87_p1.read()), ap_const_lv1_0);
}

void Block_proc24::thread_output_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op17_write_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, input_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op10_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, output_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op17_write_state1.read()))))) {
        output_V_write = ap_const_logic_1;
    } else {
        output_V_write = ap_const_logic_0;
    }
}

void Block_proc24::thread_temp_data_out_tkeep_s_fu_109_p2() {
    temp_data_out_tkeep_s_fu_109_p2 = (tmp_3_fu_101_p3.read() | ap_const_lv64_1);
}

void Block_proc24::thread_temp_data_out_tlast_s_fu_79_p3() {
    temp_data_out_tlast_s_fu_79_p3 = input_V_dout.read().range(576, 576);
}

void Block_proc24::thread_tmp_1_nbwritereq_fu_58_p3() {
    tmp_1_nbwritereq_fu_58_p3 =  (sc_lv<1>) (output_V_full_n.read());
}

void Block_proc24::thread_tmp_3_fu_101_p3() {
    tmp_3_fu_101_p3 = esl_concat<63,1>(tmp_4_fu_91_p4.read(), ap_const_lv1_0);
}

void Block_proc24::thread_tmp_4_fu_91_p4() {
    tmp_4_fu_91_p4 = input_V_dout.read().range(574, 512);
}

void Block_proc24::thread_tmp_5_fu_87_p1() {
    tmp_5_fu_87_p1 = input_V_dout.read().range(511-1, 0);
}

void Block_proc24::thread_tmp_nbreadreq_fu_50_p3() {
    tmp_nbreadreq_fu_50_p3 =  (sc_lv<1>) (input_V_empty_n.read());
}

void Block_proc24::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

