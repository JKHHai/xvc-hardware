-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity test_hls_server is
port (
    input_V_dout : IN STD_LOGIC_VECTOR (576 downto 0);
    input_V_empty_n : IN STD_LOGIC;
    input_V_read : OUT STD_LOGIC;
    output_V_din : OUT STD_LOGIC_VECTOR (576 downto 0);
    output_V_full_n : IN STD_LOGIC;
    output_V_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC );
end;


architecture behav of test_hls_server is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "test_hls_server,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu19eg-ffvc1760-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=0,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2,HLS_SYN_LUT=95,HLS_VERSION=2018_3}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv577_lc_1 : STD_LOGIC_VECTOR (576 downto
    constant ap_const_logic_1 : STD_LOGIC := '1';

    signal Block_proc24_U0_ap_start : STD_LOGIC;
    signal Block_proc24_U0_ap_done : STD_LOGIC;
    signal Block_proc24_U0_ap_continue : STD_LOGIC;
    signal Block_proc24_U0_ap_idle : STD_LOGIC;
    signal Block_proc24_U0_ap_ready : STD_LOGIC;
    signal Block_proc24_U0_input_V_read : STD_LOGIC;
    signal Block_proc24_U0_output_V_din : STD_LOGIC_VECTOR (576 downto 0);
    signal Block_proc24_U0_output_V_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal Block_proc24_U0_start_full_n : STD_LOGIC;
    signal Block_proc24_U0_start_write : STD_LOGIC;

    component Block_proc24 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_V_dout : IN STD_LOGIC_VECTOR (576 downto 0);
        input_V_empty_n : IN STD_LOGIC;
        input_V_read : OUT STD_LOGIC;
        output_V_din : OUT STD_LOGIC_VECTOR (576 downto 0);
        output_V_full_n : IN STD_LOGIC;
        output_V_write : OUT STD_LOGIC );
    end component;



begin
    Block_proc24_U0 : component Block_proc24
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_proc24_U0_ap_start,
        ap_done => Block_proc24_U0_ap_done,
        ap_continue => Block_proc24_U0_ap_continue,
        ap_idle => Block_proc24_U0_ap_idle,
        ap_ready => Block_proc24_U0_ap_ready,
        input_V_dout => input_V_dout,
        input_V_empty_n => input_V_empty_n,
        input_V_read => Block_proc24_U0_input_V_read,
        output_V_din => Block_proc24_U0_output_V_din,
        output_V_full_n => output_V_full_n,
        output_V_write => Block_proc24_U0_output_V_write);




    Block_proc24_U0_ap_continue <= ap_const_logic_1;
    Block_proc24_U0_ap_start <= ap_const_logic_1;
    Block_proc24_U0_start_full_n <= ap_const_logic_1;
    Block_proc24_U0_start_write <= ap_const_logic_0;
    ap_sync_continue <= ap_const_logic_0;
    input_V_read <= Block_proc24_U0_input_V_read;
    output_V_din <= Block_proc24_U0_output_V_din;
    output_V_write <= Block_proc24_U0_output_V_write;
end behav;
