// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_proc24 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        input_V_dout,
        input_V_empty_n,
        input_V_read,
        output_V_din,
        output_V_full_n,
        output_V_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [576:0] input_V_dout;
input   input_V_empty_n;
output   input_V_read;
output  [576:0] output_V_din;
input   output_V_full_n;
output   output_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_V_read;
reg output_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    input_V_blk_n;
wire   [0:0] tmp_nbreadreq_fu_50_p3;
wire   [0:0] tmp_1_nbwritereq_fu_58_p3;
reg    output_V_blk_n;
reg    ap_predicate_op10_read_state1;
reg    ap_predicate_op17_write_state1;
reg    ap_block_state1;
wire   [62:0] tmp_4_fu_91_p4;
wire   [63:0] tmp_3_fu_101_p3;
wire   [0:0] temp_data_out_tlast_s_fu_79_p3;
wire   [63:0] temp_data_out_tkeep_s_fu_109_p2;
wire   [510:0] tmp_5_fu_87_p1;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((output_V_full_n == 1'b0) & (ap_predicate_op17_write_state1 == 1'b1)) | ((input_V_empty_n == 1'b0) & (ap_predicate_op10_read_state1 == 1'b1))) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((output_V_full_n == 1'b0) & (ap_predicate_op17_write_state1 == 1'b1)) | ((input_V_empty_n == 1'b0) & (ap_predicate_op10_read_state1 == 1'b1))) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((output_V_full_n == 1'b0) & (ap_predicate_op17_write_state1 == 1'b1)) | ((input_V_empty_n == 1'b0) & (ap_predicate_op10_read_state1 == 1'b1))) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (tmp_1_nbwritereq_fu_58_p3 == 1'd1) & (tmp_nbreadreq_fu_50_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_V_blk_n = input_V_empty_n;
    end else begin
        input_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((output_V_full_n == 1'b0) & (ap_predicate_op17_write_state1 == 1'b1)) | ((input_V_empty_n == 1'b0) & (ap_predicate_op10_read_state1 == 1'b1))) & (1'b1 == ap_CS_fsm_state1) & (ap_predicate_op10_read_state1 == 1'b1))) begin
        input_V_read = 1'b1;
    end else begin
        input_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (tmp_1_nbwritereq_fu_58_p3 == 1'd1) & (tmp_nbreadreq_fu_50_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        output_V_blk_n = output_V_full_n;
    end else begin
        output_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((output_V_full_n == 1'b0) & (ap_predicate_op17_write_state1 == 1'b1)) | ((input_V_empty_n == 1'b0) & (ap_predicate_op10_read_state1 == 1'b1))) & (1'b1 == ap_CS_fsm_state1) & (ap_predicate_op17_write_state1 == 1'b1))) begin
        output_V_write = 1'b1;
    end else begin
        output_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((output_V_full_n == 1'b0) & (ap_predicate_op17_write_state1 == 1'b1)) | ((input_V_empty_n == 1'b0) & (ap_predicate_op10_read_state1 == 1'b1)));
end

always @ (*) begin
    ap_predicate_op10_read_state1 = ((tmp_1_nbwritereq_fu_58_p3 == 1'd1) & (tmp_nbreadreq_fu_50_p3 == 1'd1));
end

always @ (*) begin
    ap_predicate_op17_write_state1 = ((tmp_1_nbwritereq_fu_58_p3 == 1'd1) & (tmp_nbreadreq_fu_50_p3 == 1'd1));
end

assign output_V_din = {{{{temp_data_out_tlast_s_fu_79_p3}, {temp_data_out_tkeep_s_fu_109_p2}}, {tmp_5_fu_87_p1}}, {1'd0}};

assign temp_data_out_tkeep_s_fu_109_p2 = (tmp_3_fu_101_p3 | 64'd1);

assign temp_data_out_tlast_s_fu_79_p3 = input_V_dout[32'd576];

assign tmp_1_nbwritereq_fu_58_p3 = output_V_full_n;

assign tmp_3_fu_101_p3 = {{tmp_4_fu_91_p4}, {1'd0}};

assign tmp_4_fu_91_p4 = {{input_V_dout[574:512]}};

assign tmp_5_fu_87_p1 = input_V_dout[510:0];

assign tmp_nbreadreq_fu_50_p3 = input_V_empty_n;

endmodule //Block_proc24
